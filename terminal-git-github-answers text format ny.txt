Terminal, Git and GitHub assignment 
Terminal, Git and GitHub are really useful tools for a programmer. It’s good to know at least the basics for all of these, but for example Git is something that most programmers use daily. There is lot to learn if you want to master these tools, but with some basic knowledge and tutorials you can start to use these and learn more while you are using them. 
Here is a list of resources that you can use to learn more: 
• 
Terminal, this tutorial is made for Ubuntu (a version of Linux), but the commands can be use on macOS and Windows as well 

• 
Git, this is the o.icial tutorial for Git to get started, but there is also a book on the Git site that goes more into detail 

• 
Git, this is the w3schools Git tutorial 

• 
Git, this is the tutorialspoint Git tutorial 

• 
GitHub, this is the GitHub quickstart tutorial to GitHub and you can also find here more tutorials on Git and GitHub 


You can also refer to these tutorials if you get stuck in some task. 
Terminal 
First download the example directory that you’ll need for this exercise. Move the example directory to your desktop and then you can start doing the exercises. 
To open the terminal: 
• 
In Mac, press Cmd + Space to open spotlight search and write terminal and press enter. 

• 
In Linux, press Ctrl + Alt + T to open the terminal. 

• 
In Windows you can use search bar to find and open Git Bash. 


1. Write the command to change the terminal directory to the example directory. Answer: 

Depending on your OS settings you might have here something like /onedrive before the desktop and also depending on your language settings the desktop might be in some other language. 
2. Check the contents of the directory with a terminal command. Write the command and what files and directories are inside the example directory. 
Answer: 

Contents: project/ (directory) and todo.txt 
3. Copy and rename the “todo.txt” as “todo-copy.txt” to the project directory with a terminal command. 
Answer: 

4. Now move the original “todo.txt” file to the project directory using a terminal command. Write the terminal commands. 
Answer: 

5. Now move to the project directory and check it’s contents with terminal commands. Write commands and the contents. 
Answer: 

Contents: theextrafile.txt, todo-copy.txt and todo.txt 
You can give bash two commands at once and the terminal will do them in order. In this case it will first move you to the project directory and then list the content inside that directory. 
6. Create a new directory named “newDir” inside the project directory and move to it with terminal commands. Write the terminal commands. 
Answer: 

7. Create two new text files named “newText1” and “newText2” inside newDir directory with a terminal commmand. Write the command. 
Answer: 

8. Now delete “newText2” file in the “newDir” directory with a terminal command. Write the command. 
Answer: 

9. Move back one directory and delete the “newDir” directory while the “newText1” file is inside it with a terminal command. Write the commands to do this. 
Answer: 

Here we deleted both “newDir” directory and the “newText1” file at the same time. If the directory contains other directories or files you have to use argument -R to recursively delete all the files and directories. 
Git 
Let’s then work on the same directory, but now train how to use Git for version control. You should now have the file called “todo.txt” in your project directory. That “todo.txt” file should contain 6 tasks in a list. 
1. Initialize Git in the project directory. Write the command. 
Answer: 

Now Git follows the changes in the project directory. 
2. Sometimes we don’t want Git to track every file in our directory and for that we use a gitignore file. Create file named “.gitignore” (file is just .gitignore without anything added) with a terminal command and with a text editor (E.g. Notepad, you don’t have to use a terminal command for this) add “theextrafile.txt” and “todo-copy.txt” as separate lines into this file. 
Answer: 

3. Add the todo.txt file to Git. Write the command. 
Answer: 

You can use here “git add .” or “git add ‘filename’”, but remember that with file name you have to include the file extension, “.txt” in this case. If you used “git add .” you should notice that Git doesn’t add the “theextrafile.txt” and “todo-copy.txt” which are ignored with the .gitignore file. 
4. Check that Git added the todo.txt using Git command for checking status. Write the command. 
Answer: 

5. Commit the added todo.txt file with the commit message ‘first commit’. Write the command. 
Answer: 

You always must put at least some kind of commit message but usually it’s recommended to write short but informative commit messages, so everybody knows what has been done at which commit. 
6. Now add “7. Practice code.” as a new line to the “todo.txt” with some text editor (E.g. Notepad, you don’t have to use a terminal command for this). Then check the file with “git status” and write the state that the “todo.txt” file is in. 
Answer: State should be modified, which means that Git has noticed that the file was edited. 
7. Add and commit these changes with the message ‘added new task’. Write the commands. 
Answer: 

You can also chain Git commands. 
8. Create a new branch named newBranch. Write the command. 
Answer: 

9. Now in this branch edit the todo.txt by adding “8. Complete internship task.”, “9. Practice chess openings.”, “10. Solve chess puzzles.” and “11. Check exam schedule.” as new lines. After adding add and commit these edits with the message ‘Added new tasks’. Write the commands. 
Answer: 

10. Move back to the master branch and open the “todo.txt” with some text editor (E.g. Notepad, you don’t have to use a terminal command for this). Write the command and the last line from the todo list. 
Answer: 

Last line: 7. Practice code. So as you can see the edits that we made in the newBranch don’t show up in the master branch. 
11. Now merge the newBranch into the master branch. Write the command. 
Answer: 

12. Delete the newBranch now that it’s edits are merged to the master branch. Write the command. 
Answer: 

With the argument -d you can only delete branches that have been merged to other branch. If for some reason you would want to delete a branch without merging you can use argument -D. 

GitHub 
Lastly let’s practice how to add Git repositories to GitHub. 
1. First create a new GitHub repository named Git-tutorial. 
Answer: First click the “+” icon in the top right corner in the GitHub site: 

Then click “New repository”: 

Give the repository the name “Git-tutorial”: 

Then click “Create repository”: 

For the next three tasks you can get help from the page that you are redirected after creating the GitHub repository. If you don’t remember or know the commands for the next tasks you can refer to the section “…or push an existing repository from the command line” in the GitHub page. 
2. Set up your new GitHub repository as your remote repository in Git. Write the command. 
Answer: 

You can find the URL for example, from the page that you were redirected after creating the GitHub repository. 
3. Rename your local Git repository as main so that it matches the GitHub naming convention. Write the command. 
Answer: 

4. Push your local Git repository to the remote GitHub repository. Write the command. 
Answer: 

After this your todo.txt should be in your remote repository in GitHub. 
5. Change the directory to the example directory and clone your remote repository from GitHub. Write the commands. 
Answer: First get your https-URL from GitHub by pressing the “Code” button on the reposi­torys main page: 

Then copy the URL: 




